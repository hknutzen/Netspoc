#!/usr/bin/env perl

=head1 NAME

print-group - Show elements of a netspoc group definition

=head1 SYNOPSIS

print-group [options] FILE|DIR 'group:name,...'

=head1 DESCRIPTION

This program prints the elements of a netspoc group definition which
is read from command line.
By default it shows a line with IP/prefixlen and name for each element
separated by tab character. Group is a simple group, some automatic
group, or a union or intersection or complement of simpler groups.

=head1 OPTIONS

=over 4

=item B<-nat> name

Uses network:name as reference when resolving IP address in a NAT environment.

=item B<-unused>

Show only elements not used in any rules.

=item B<-name>

Show only name of elements.

=item B<-ip>

Show only IP address of elements.

=item B<-owner>

Show owner of elements.

=item B<-ipv6>

Expect IPv6 definitions everywhere except in subdirectory "ipv4/".

=item B<-quiet>

Don't print progress messages.

=item B<-help>

Prints a brief help message and exits.

=item B<-man>

Prints the manual page and exits.

=back

=head1 COPYRIGHT AND DISCLAIMER

(c) 2019 by Heinz Knutzen <heinz.knutzen@googlemail.com>

This program uses modules of Netspoc, a Network Security Policy Compiler.
http://hknutzen.github.com/Netspoc

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License along
with this program; if not, write to the Free Software Foundation, Inc.,
51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.

=cut

use strict;
use warnings;
use Capture::Tiny 'capture_stderr';
use open qw(:std :utf8);
use Encode qw(decode_utf8);
use Netspoc::Compiler::GetArgs qw(read_config combine_config);
use Netspoc::Compiler::File qw(*current_file *input);
use Netspoc::Compiler::Common;
use Netspoc::Compiler::Pass1;
use Getopt::Long;
use Pod::Usage;

# VERSION: inserted by DZP::OurPkgVersion

####################################################################
# Argument processing
####################################################################

my ($nat_net, $show_unused, $show_ip, $show_name, $show_owner,
    $quiet, $help, $ipv6, $man, $export);

GetOptions ( 'nat=s'  => \$nat_net,
             'unused' => \$show_unused,
             'ip!'    => \$show_ip,
             'name!'  => \$show_name,
             'owner!' => \$show_owner,
             'quiet!' => \$quiet,
             'help|?' => \$help,
             ipv6     => \$ipv6,
             export   => \$export,
             man      => \$man,
	     ) or pod2usage(2);
pod2usage(1) if $help;
pod2usage(-exitstatus => 0, -verbose => 2) if $man;
$show_ip or $show_name or $show_ip = $show_name = 1;

my $in_path = shift @ARGV or pod2usage(2);
my $definition = shift @ARGV or pod2usage(2);
$definition = decode_utf8($definition, 1);

@ARGV and pod2usage(2);

####################################################################
# Main program
####################################################################

my $file_config = &read_config($in_path);
$config = combine_config($file_config,
                         {verbose => !$quiet, ipv6 => $ipv6, export => $export});
init_global_vars();

# Parse group definition(s).
$input = "$definition;";
$current_file = 'group definition';
my $parsed = read_union(';');
skip_space_and_comment();
pos $input == length $input or die "Invalid group specification\n";

# Read and process Netspoc configuration file or directory.
read_file_or_dir($in_path);
order_protocols();
link_topology();
mark_disabled();
set_zone();
setpath();

call_go('print-group-go', {
    in_path => $in_path,
    nat_net => $nat_net || '',
    parsed => $parsed,
    show_ip => $show_ip,
    show_name => $show_name,
    show_owner => !!$show_owner,
    show_unused => !!$show_unused,
        });
