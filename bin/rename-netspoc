#!/usr/bin/env perl

=head1 NAME

rename-netspoc - Rename one or more objects in netspoc files

=head1 SYNOPSIS

rename-netspoc [options] FILE|DIR SUBSTITUTION ...

=head1 DESCRIPTION

This program reads a netspoc configuration and one or more
SUBSTITUTIONS. It substitutes found objects with its replacement in
each file. Changes are done in place, no backup files are created. But
only changed files are touched.

=head1 SUBSTITUTION

A SUBSTITUTION is a pair of typed names "type:NAME1" "type:NAME2".
NAME1 is searched and replaced by NAME2. Both types of a single
SUBSTITUTION must use the same type. Multiple SUBSTITUTIONS can be applied in a single run of rename-netspoc.

A typed name can use any valid type and name in netspoc syntax.
Valid types are: B<router network host any group area service owner
admin protocol protocolgroup pathrestriction nat isakmp ipsec crypto>.

A SUBSTITUTION of type B<network> also changes B<interface> and B<host:id>
which reference the given network.  A SUBSTITUTION of type B<router>
also changes B<interfaces> which reference the given router.
A SUBSTITUTION of type B<nat> also changes the corresponding B<bind_nat> list.
A SUBSTITUTION of type B<owner> also changes the corresponding B<sub_owner>.

=head1 OPTIONS

=over 4

=item B<-f> file

Read SUBSTITUTIONS from file.

=item B<-q>

Quiet, don't print status messages.

=item B<-help>

Prints a brief help message and exits.

=item B<-man>

Prints the manual page and exits.

=back

=head1 COPYRIGHT AND DISCLAIMER

(c) 2017 by Heinz Knutzen <heinz.knutzen@googlemail.com>

http://hknutzen.github.com/Netspoc

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License along
with this program; if not, write to the Free Software Foundation, Inc.,
51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.

=cut

use strict;
use warnings;
use open qw(:std :utf8);
use Netspoc::Compiler::GetArgs qw(read_config combine_config);
use Netspoc::Compiler::File qw(process_file_or_dir *current_file *input);
use Netspoc::Compiler::Common;
use Getopt::Long;
use Pod::Usage;
use Encode;

# VERSION: inserted by DZP::OurPkgVersion
my $quiet;

my %global_type =
    map { $_ => 1 } qw(
router network host any group area service
owner protocol protocolgroup pathrestriction nat isakmp ipsec crypto
);

# NAT is applied with bind_nat.
# Owner is optionally referenced as sub_owner.
# Interface definition uses network name.
my %aliases = ( nat   => ['bind_nat'],
                owner => ['sub_owner'],
                network => [ 'interface'],
    );

my %subst;

# Fill %subst with mapping from search to replace for given type.
sub setup_subst {
    my ($type, $search, $replace) = @_;
    $global_type{$type} or fatal_err("Unknown type $type");

    $subst{$type}->{$search} = $replace;

    if (my $list = $aliases{$type}) {
        for my $other (@$list) {
            $subst{$other}->{$search} = $replace;
        }
    }

    # Mark additinal types as valid for substitution.
    if ($type eq 'network') {
        $subst{interface} ||= {};
        $subst{host} ||= {};
    }
    if ($type eq 'router') {
        $subst{interface} ||= {};
    }
}

sub subst {
    my ($type, $name) = @_;
    $subst{$type} or return $name;

    # ID host is extended by network name.
    if ($type eq 'host' and
        my ($host, $network) = ($name =~ /^(id:.*)[.]([\w-]+)$/))
    {
        if (my $replace = $subst{host}->{$host}) {
            $host = $replace;
            $name = "$host.$network";
        }
        if (my $replace = $subst{network}->{$network}) {
            $network = $replace;
            $name = "$host.$network";
        }
    }

    # Reference to interface ouside the definition of router.
    elsif ($type eq 'interface' and
           (my $router, $network, my $ext) =
           ($name =~ /^([\w@-]+)[.]([\w-]+)((?:[.].*)?)$/))
    {
        if (my $replace = $subst{router}->{$router}) {
            $router = $replace;
            $name = "$router.$network$ext";
        }
        if (my $replace = $subst{network}->{$network}) {
            $network = $replace;
            $name = "$router.$network$ext";
        }
    }
    elsif (my $replace = $subst{$type}->{$name}) {
        $name = $replace;
    }

    return $name;
}

# Reads from global variable $input.
sub process {
    my $changed = 0;
    my $type_list;
    my $copy = '';
    while(1) {

        # Ignore comment.
        if ($input =~ /\G (\s* [#] .* \n) /gcx) {
            $copy .= $1;
        }

        # Handle list of names after "name = "
        elsif ($type_list) {

            # Read list element.
            if ($input =~ /\G (\s*) ([-\w.\@:]+) /gcx) {
                $copy .= $1;
                my $name = $2;
                my $new = subst($type_list, $name);
                $copy .= $new;
                $changed++ if $name ne $new;
            }

            # Read comma.
            elsif ($input =~ /\G (\s*,\s*) /gcx) {
                $copy .= $1;
            }

            # Everything else terminates list.
            else {
                $type_list = undef;
            }
        }

        # Find next "type:name".
        elsif ($input =~ /\G (.*?) (\w+) (:) ([-\w.\@:]+) /gcx) {
            $copy .= "$1$2$3";
            my $type = $2;
            my $name = $4;
            my $new = subst($type, $name);
            $copy .= $new;
            $changed++ if $name ne $new;
        }

        # Find "type = name".
        elsif ($input =~ /\G (.*?) ([-\w]+) (\s* = [ \t]*) /gcx) {
            $copy .= "$1$2$3";
            my $type = $2;
            if ($subst{$type}) {
                $type_list = $type;
            }
        }

        # Ignore rest of line if nothing matches.
        elsif($input =~ /\G (.* \n) /gcx) {
            $copy .= $1;
        }

        # Terminate, if everything has been processed.
        else {
            last;
        }
    }
    return ($changed, $copy);
}

sub process_input {
    my ($count, $copy) = process();
    $count or return;
    my $path = $current_file;
    info "$count changes in $path" if not $quiet;
    unlink($path) or fatal_err("Can't remove $path: $!");
    open(my $out, '>', $path) or fatal_err("Can't create $path: $!");
    print $out $copy;
    close $out;
}

sub setup_pattern {
    my (@pattern) = @_;
    while (@pattern) {
        my $old = shift @pattern;
        my $new = shift @pattern or
            fatal_err "Missing replace string for '$old'";
        my ($type, $old_name) = ($old =~ /^(\w+):(.*)$/) or
            fatal_err "Missing type in '$old'";
        my ($n_type, $new_name) = ($new =~ /^(\w+):(.*)$/) or
            fatal_err "Missing type in '$new'";
        $type eq $n_type or
            fatal_err "Types must be identical in\n - $old\n - $new";
        setup_subst($type, $old_name, $new_name);
    }
    return;
}

sub read_pattern {
    my ($path) = @_;

    # Read file as one large line.
    local $/;
    open(my $file, '<', $path) or fatal_err "Can't open $path: $!";
    my $input = <$file>;
    close $file;
    my @pattern = split(' ', $input) or
        fatal_err "Missing pattern in $path";
    setup_pattern(@pattern);
}

####################################################################
# Argument processing
####################################################################

# Make @ARGV utf-8.
$_ = Encode::decode('UTF-8' , $_) for @ARGV;

my ($from_file, $help, $man);
GetOptions ( 'f=s' => \$from_file,
             'quiet!' => \$quiet,
	     'help|?' => \$help,
	     man => \$man,
	     ) or pod2usage(2);
pod2usage(1) if $help;
pod2usage(-exitstatus => 0, -verbose => 2) if $man;

my $path = shift @ARGV or pod2usage(2);
$from_file or @ARGV or pod2usage(2);

####################################################################
# Main program
####################################################################

# Initialize search/replace pairs.
read_pattern($from_file) if $from_file;
setup_pattern(@ARGV) if @ARGV;

# Initialize $config, especially 'ignore_files'.
my $file_config = read_config($path);
$config = combine_config($file_config, {verbose => !$quiet});

# Do substitution.
process_file_or_dir($path, \&process_input);
