#!/usr/bin/env perl

=head1 NAME

print-service - Show info about a netspoc service definition

=head1 SYNOPSIS

print-service [options] FILE|DIR [SERVICE-NAME]

=head1 DESCRIPTION

This program prints expanded rules about all or a single netspoc
service definition.
Output format is
service-name:permit|deny src-ip dst-ip protocol-description

=head1 OPTIONS

=over 4

=item B<-nat> name

Uses network:name as reference when resolving IP address in a NAT environment.

=item B<-name>

Show name, not IP of elements.

=item B<-ipv6>

Expect IPv6 definitions everywhere except in subdirectory "ipv4/".

=item B<-quiet>

Don't print progress messages.

=item B<-help>

Prints a brief help message and exits.

=item B<-man>

Prints the manual page and exits.

=back

=head1 COPYRIGHT AND DISCLAIMER

(c) 2020 by Heinz Knutzen <heinz.knutzen@googlemail.com>

This program uses modules of Netspoc, a Network Security Policy Compiler.
http://hknutzen.github.com/Netspoc

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License along
with this program; if not, write to the Free Software Foundation, Inc.,
51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.

=cut

use strict;
use warnings;
use open qw(:std :utf8);
use Encode qw(decode_utf8);
use Netspoc::Compiler::GetArgs qw(read_config combine_config);
use Netspoc::Compiler::Common;
use Netspoc::Compiler::Pass1;
use Getopt::Long;
use Pod::Usage;

# VERSION: inserted by DZP::OurPkgVersion

####################################################################
# Argument processing
####################################################################

my ($nat_net, $ipv6, $show_name, $quiet, $help, $man, $export);

GetOptions ( 'nat=s'  => \$nat_net,
             'ipv6'   => \$ipv6,
             'name'   => \$show_name,
             'quiet!' => \$quiet,
             export   => \$export,
	     'help|?' => \$help,
	     man => \$man,
	     ) or pod2usage(2);
pod2usage(1) if $help;
pod2usage(-exitstatus => 0, -verbose => 2) if $man;

my $in_path = shift @ARGV or pod2usage(2);
my @names = @ARGV;

####################################################################
# Main program
####################################################################

my $file_config = &read_config($in_path);
$config = combine_config($file_config, { verbose => !$quiet,
                                         ipv6 => $ipv6,
                                         export => $export });
init_global_vars();

# Read and process Netspoc configuration file or directory.
&read_file_or_dir($in_path);

if (@names) {
    for my $name (@names) {
        $name = decode_utf8($name, 1);
        $name =~ s/^service://;
        $services{$name} or die "Unknown service '$name'\n";
    }
}
&order_protocols();
&link_topology();
&mark_disabled();

call_go('print-service-go', {
    in_path => $in_path,
    nat_net => $nat_net || '',
    service_names => \@names,
    show_name => !!$show_name,
        });
