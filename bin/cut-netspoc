#!/usr/bin/env perl

=head1 NAME

cut-netspoc - Print parts of a netspoc configuration to stdout

=head1 SYNOPSIS

cut-netspoc [options] FILE|DIR [service:name] ...

=head1 DESCRIPTION

Reads a Netspoc configuration and prints parts of this configuration
to STDOUT. If one or more services are given as argument, only those
parts are printed, that are referenced by given serices. If no service
is given, it acts as if all services are specified. This is useful to
eliminate all disabled parts of the topology.

=head1 OPTIONS

=item B<-q>

Quiet, don't print status messages.

=item B<-help>

Prints a brief help message and exits.

=item B<-man>

Prints the manual page and exits.

=back

=head1 COPYRIGHT AND DISCLAIMER

(c) 2020 by Heinz Knutzen <heinz.knutzen@googlemail.com>

http://hknutzen.github.com/Netspoc

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License along
with this program; if not, write to the Free Software Foundation, Inc.,
51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.

=cut

use feature 'current_sub';
use strict;
use warnings;
use Getopt::Long;
use Pod::Usage;
use Netspoc::Compiler::GetArgs qw(read_config combine_config);
use Netspoc::Compiler::File qw(process_file_or_dir *input);
use Netspoc::Compiler::Common;
use Netspoc::Compiler::Pass1;
use Encode qw(decode_utf8);

# VERSION: inserted by DZP::OurPkgVersion

####################################################################
# Argument processing
####################################################################
my ($quiet, $help, $man, $ipv6, $export);

GetOptions ( 'quiet!' => \$quiet,
             'ipv6'   => \$ipv6,
             'export' => \$export,
	     'help|?' => \$help,
	     man => \$man,
	     ) or pod2usage(2);
pod2usage(1) if $help;
pod2usage(-exitstatus => 0, -verbose => 2) if $man;

my $path = shift @ARGV;

# Give each source part an index to preserve original order.
my $src_index = 1;

# Enhanced version of parse_input, which stores source code of each
# global definition.
sub parse_input_with_src {
    my $length = length $input;
    while (skip_space_and_comment, pos $input != $length) {
        my $pre    = pos $input;
        my $object = parse_toplevel();
        my $post   = pos $input;
        $object->{src_code} = substr $input, $pre, $post - $pre;
        $object->{src_index} = $src_index++;
    }
}

sub change_attribute_src_code_at {
    my ($attr, $object, $sub_name, $replace) = @_;
    my $code = $object->{src_code};

    # Start changing at $sub_name.
    # Do nothing, if $sub_name can't be found, e.g. virtual interface.
     if ($sub_name) {
        $code =~ m/ ^[^#]* \Q$sub_name\E (?=[\s;=#]) /gmx or return;
    }

    # Find attribute outside of comment,
    # either at new line or directly behind $sub_name.
    $code =~ m/ (?:^|\G) [^#]*? \b \Q$attr\E (?=[\s;=#]) /gmx;
    my $start = pos($code) - length($attr);

    # Helper functions to parse attribute value.
    my $skip_space_and_comment = sub {
        $code =~ /\G (?:(?: [#] .* (?: \n | $ )) | \s*)*/gcx;
    };
    my $check = sub {
        my ($string) = @_;
        $skip_space_and_comment->();
        return $code =~ /\G\Q$string\E/gc;
    };
    my $read_token = sub {
        $skip_space_and_comment->();
        $code =~ /\G [^,;\s#]+ /gcx or die("Parse error: Token expected");
    };
    my $read_attr_body;
    $read_attr_body = sub {
        if ($check->(';')) {

            # Attribute has no value; finished.
        }
        elsif ($check->('=')) {

            # Read complex value.
            if ($check->('{')) {
                if ($check->('description')) {
                    $check->('=');
                    $code =~ /\G .* \n/gcx;
                }
                while (1) {
                    last if $check->('}');
                    $read_token->();
                    $read_attr_body->();
                }
            }

            # Read comma separated list of values.
            else {
                while (1) {
                    last if $check->(';');
                    $read_token->();
                    $check->(',');
                }
            }
        }
    };
    $read_attr_body->();
    my $end = pos($code);

    # Remove leading white space and trailing line break.
    if (not $replace) {

        # Find trailing line break.
        $code =~ /\G [ \t]* (?: [#] .* )? (?: \n | $ )/gcx;
        $end = pos($code);

        # Find leading white space.
        pos($code) = $start;
        if ($code =~ /([ \t]*)\G/g) {
            $start -= length($1);
        }
    }
    my $len = $end - $start;
    substr($object->{src_code}, $start, $len) = $replace;
}

sub remove_attribute_src_code_at {
    my ($attr, $object, $sub_name) = @_;
    change_attribute_src_code_at($attr, $object, $sub_name, '');
}

#sub change_attribute_src_code {
#    my ($attr, $object, $replace) = @_;
#    change_attribute_src_code_at($attr, $object, '', $replace);
#}

sub remove_attribute_src_code {
    my ($attr, $object) = @_;
    change_attribute_src_code_at($attr, $object, '', '');
}

# Collect networks that need to be connected by unmanaged parts of topology.
my @todo_unmanaged;

# This function is called by path_walk to mark all managed routers
# on path from src to dst of $rule with attribute {is_used}.
sub mark_topology {
    my (undef, $in_intf, $out_intf) = @_;
    my $router = ($in_intf || $out_intf)->{router};
    $router->{is_used} = 1;
#    debug "Used $router->{name}";
    for my $intf ($in_intf, $out_intf) {
        $intf or next;
        my $network = $intf->{network};
        $intf->{is_used} = 1;
        $network->{is_used} = 1;
        push @todo_unmanaged, $network;
    }
}

# Mark path between $objects and marked parts of topology.
# $object must be of type network or router.
# Depending on $managed, mark only unmanaged or also managed parts.
sub mark_unconnected {
    my ($objects, $managed) = @_;
    my $what = $managed ? 'managed' : 'unmanaged';
    progress("Marking $what routers");

    my $mark = sub {
        my ($obj, $in_interface, $seen) = @_;
        return if $seen->{$obj}++;
        if ($obj->{is_used}) {
#            debug "Found $obj->{name}";
            return 1;
        }
        return if not $managed and ($obj->{managed} || $obj->{semi_managed});
        my $result = 0;
        for my $interface (@{ $obj->{interfaces} }) {
            next if $interface eq $in_interface;
            next if $interface->{main_interface};
            my $next = $interface->{is_network($obj) ? 'router' : 'network'};
            if (__SUB__->($next, $interface, $seen)) {
                $obj->{is_used} = 1;
                $interface->{is_used} = 1;
#                debug "Marked $obj->{name} + $interface->{name}";
                $result = 1;
            }
        }
        return $result;
    };

    for my $obj (@$objects) {
#        debug "Connecting $obj->{name}";
        my $seen = { $obj => 1 };
        for my $interface (@{ $obj->{interfaces} }) {
            next if $interface->{main_interface};
            my $next = $interface->{is_network($obj) ? 'router' : 'network'};
#            debug "Try $next->{name} $interface->{name}";
            if ($mark->($next, $interface, $seen)) {
                $interface->{is_used} = 1;
#                debug "Marked $interface->{name}";
            }
        }
    }
}

sub mark_path {
    my ($src, $dst) = @_;
    for my $intf ($src, $dst) {
        my $net = $intf->{network};
        $intf->{is_used} = 1;
        $net->{is_used} = 1;
        push @todo_unmanaged, $net;
    }
    my $rule = {src => $src, dst => $dst, prt => {}};
#    debug "Path $src->{name} $dst->{name}";
    single_path_walk($rule, \&mark_topology);
}

# We can't use %aggregates from Netspoc.pm because it only holds named
# aggregates. But we need unnamed aggregates like any:[network:XX]
# as well.
my @all_zones;
sub get_zones {
    my %all_zones;
    for my $network (values %networks) {
        next if $network->{disabled};
        my $zone = $network->{zone};
        $all_zones{$zone} = $zone;
    }
    @all_zones = values %all_zones;
    return;
}

sub get_used_nat_tags {
    my $used = {};
    for my $network (values %networks) {
        $network->{is_used} or next;
        my $nat_hash = $network->{nat};
        for my $tag (keys %$nat_hash) {
            next if $used->{$tag};
            next if $nat_hash->{tag}->{identity};
            $used->{$tag} = 1;
        }
    }
    return $used;
}

####################################################################
# Main program
####################################################################

my $file_config = read_config($path);
$config = combine_config($file_config,
                    {time_stamps => 1, max_errors => 9999, verbose => !$quiet,
                     ipv6 => $ipv6, export => $export });
init_global_vars();
show_version();

# Read and process netspoc configuration data.
# Remember source code of each global definition.
process_file_or_dir($path, \&parse_input_with_src);

my %name2var = ( service => \%services);

if (@ARGV) {

    # Read names of services from command line.
    for my $arg (map { decode_utf8($_, 1) } @ARGV) {
        my ($type, $name) = split_typed_name $arg;
        my $ref = $name2var{$type} or pod2usage(2);
        my $thing = $ref->{$name} or fatal_err "Unknown $arg";
        $thing->{is_used} = 1;
    }

    # Delete unwanted global definitions.
    for my $ref (values %name2var) {
        for my $name (keys %$ref) {
            $ref->{$name}->{is_used} or delete $ref->{$name};
        }
    }
}

# Retain all services, if no argument is given.
# Only remove disabled parts.

&order_protocols();
&link_topology();
&mark_disabled();
&set_zone();
&setpath();

call_go('cut-netspoc-go', {});
