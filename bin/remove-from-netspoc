#!/usr/bin/env perl

=head1 NAME

remove-from-netspoc - Remove one or more objects from netspoc files

=head1 SYNOPSIS

remove-from-netspoc [options] FILE|DIR OBJECT ...

=head1 DESCRIPTION

This program reads a netspoc configuration and one or more OBJECTS. It
removes specified objects in each file. Changes are done in place, no
backup files are created. But only changed files are touched.

=head1 OBJECT

An OBJECT is a typed name "type:NAME". Occurences of
"type:NAME" are removed. Changes are applied only in group
definitions and in implicit groups inside rules, i.e. after "user =",
"src =", "dst = ".  Multiple OBJECTS can be removed in a single run of
remove-from-netspoc.

The following types can be used in OBJECTS:
B<network host interface any group>.

=head1 OPTIONS

=over 4

=item B<-f> file

Read OBJECTS from file.

=item B<-q>

Quiet, don't print status messages.

=item B<-help>

Prints a brief help message and exits.

=item B<-man>

Prints the manual page and exits.

=back

=head1 COPYRIGHT AND DISCLAIMER

(c) 2018 by Heinz Knutzen <heinz.knutzen@googlemail.com>

http://hknutzen.github.com/Netspoc

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License along
with this program; if not, write to the Free Software Foundation, Inc.,
51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.

=cut

use strict;
use warnings;
use open qw(:std :utf8);
use Netspoc::Compiler::GetArgs qw(read_config combine_config);
use Netspoc::Compiler::File qw(process_file_or_dir *current_file *input);
use Netspoc::Compiler::Common;
use Getopt::Long;
use Pod::Usage;
use Encode;

# VERSION: inserted by DZP::OurPkgVersion
my $quiet;

my %valid_type =
    map { $_ => 1 } qw(network host interface any group area service);

my %remove;

sub check_name {
    my ($typed_name) = @_;
    my ($type, $name) = ($typed_name =~ /^(\w+):(.*)$/) or
        fatal_err "Missing type in '$typed_name'";
    $valid_type{$type} or fatal_err("Can't use type in '$typed_name'");
    $name =~ /([^-\w.:\@\/\[\]])/ and
        fatal_err("Invalid character '$1' in $typed_name");
    return;
}

sub setup_objects {
    my (@objects) = @_;
    for my $object (@objects) {
        check_name($object);
        $remove{$object} = $object;
    }
    return;
}

my $ip_pattern;
# Find occurence of typed name in list of objects:
# - group:<name> = <typed name>, ... <typed name>;
# - src = ...;
# - dst = ...;
# - user = ...;
# but ignore typed name in definition:
# - <typed name> =
# Reads from global variable $input.
sub process {
    my $changed = 0;
    my $in_list = 0;
    my $copy = '';
    while(1) {

        # Ignore comment.
        if ($input =~ /\G (\s* [#] .*\n) /gcx) {
            $copy .= $1;
        }

        elsif ($in_list) {

            # Find next "type:name".
            if ($input =~ /\G (\s*) (\w+ : [-\w.:\@\/]+)/gcx) {
                my $space = $1;
                my $object = $2;
                if ($input =~ /\G ( \[ (?: auto | all ) \] )/gcx) {
                    $object .= $1;
                }
                if (not $remove{$object}) {
                    $copy .= "$space$object";
                    next;
                }
                $changed++;

                # Current line has only one entry, remove whole line
                # including comment.
                if ($copy =~ /\n [ \t]* $/x
                    and
                    $input =~ /\G [ \t]* (,?) [ \t]* (?:[#].*)? \n /gcx)
                {

                    # Ready, if comma seen.
                    next if $1;
                }

                # Remove leading comma, if removed object is followed
                # by semicolon.
                elsif ($input =~ /\G (\s* ;) /gcx) {
                    my $trailing = $1;
                    $copy =~ s/ , \s* $//x;
                    $copy .= $trailing;
                    $in_list = undef;
                    next;
                }

                # Retain indentation of removed object if it is first
                # object in line and is followed by other object in
                # same line.
                elsif ($space =~ /^ \n /x
                       and
                       $input =~ /\G [ \t]* , [ \t]* (?=\w)/gcx)
                {
                    $copy .= $space;
                    next;
                }

                # Object with leading whitespace will be removed.
                # Also remove comma in current or some following
                # line if only separated by comment and whitespace.
                while (1) {

                    # Remove found comma. Don't remove EOL.
                    if ($input =~ /\G (\s* ,) /gcx) {
                        last;
                    }

                    # Skip and retain comment at end of line.
                    elsif ($input =~ /\G (\s* [#].* \n) /gcx) {
                        $copy .= $1;
                    }
                    else {
                        last;
                    }
                }
            }

            elsif (

                # Start of automatic group; list continues.
                $input =~ /\G ( \s* \w+ : \[ )/gcx or

                # Managed automatic group.
                $input =~ /\G ( \s* managed \s* & )/gcx or

                # IP for automatic group.
                $input =~ /\G ( \s* ip \s* = \s* $ip_pattern \s* & )/gcx or

                # End of automatic group.
                $input =~ /\G (\s* \])/gcx or

                # Negation / intersection.
                $input =~ /\G (\s* [&!])/gcx
                )
            {
                $copy .= $1;
            }

            # Read and copy comma.
            elsif ($input =~ /\G (\s* , (?: [ \t]* \n)? ) /gcx) {
                $copy .= $1;
            }

            # Read and copy description.
            elsif ($input =~ /\G  (\s* description \s* = .* \n) /gcx) {
                $copy .= $1;
            }

            # Everything else terminates list.
            else {
                $in_list = undef;
            }
        }

        # Find start of group.
        elsif ($input =~ /\G (.*?) (src | dst | user | group:[-\w]+) /gcx) {
            $copy .= "$1$2";

            # Find equal sign.
            if ($input =~ /\G (\s* = [ \t]*) /gcx) {
                $copy .= $1;
                $in_list = 1;
            }
        }

        # Ignore rest of line if nothing matches.
        elsif($input =~ /\G (.* \n) /gcx) {
            $copy .= $1;
        }

        # Terminate if everything has been processed.
        else {
            last;
        }
    }
    return ($changed, $copy);
}

sub process_input {
    my ($count, $copy) = process();
    $count or return;
    my $path = $current_file;
    info "$count changes in $path" if not $quiet;
    unlink($path) or fatal_err("Can't remove $path: $!");
    open(my $out, '>', $path) or fatal_err("Can't create $path: $!");
    print $out $copy;
    close $out;
}

sub read_objects {
    my ($path) = @_;

    # Read file as one large line.
    local $/;
    open(my $file, '<', $path) or fatal_err "Can't open $path: $!";
    my $input = <$file>;
    close $file;
    my @objects = split(' ', $input) or fatal_err "Missing objects in $path";
    setup_objects(@objects);
    return;
}

####################################################################
# Argument processing
####################################################################

# Make @ARGV utf-8.
$_ = Encode::decode('UTF-8' , $_) for @ARGV;

my ($from_file, $help, $man);

GetOptions ( 'f=s' => \$from_file,
             'q!' => \$quiet,
	     'help|?' => \$help,
	     man => \$man,
	     ) or pod2usage(2);
pod2usage(1) if $help;
pod2usage(-exitstatus => 0, -verbose => 2) if $man;

my $path = shift @ARGV or pod2usage(2);
$from_file or @ARGV or pod2usage(2);
$ip_pattern = "[a-f:.\/0-9]+";

####################################################################
# Main program
####################################################################

# Initialize to be removed objects.
read_objects($from_file) if $from_file;
setup_objects(@ARGV) if @ARGV;

# Initialize $config, especially 'ignore_files'.
my $file_config = read_config($path);
$config = combine_config($file_config, {verbose => !$quiet});

# Do substitution.
process_file_or_dir($path, \&process_input);
